name: Compile Python Package Wheels

on:
  workflow_dispatch:

jobs:
  windows:
    name: windows
    runs-on: windows-latest
    strategy:
      matrix:
        target: [x64, x86]
        python-version: ['3.6', '3.7', '3.8', '3.9', '3.10']
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.target }}
      - uses: sfackler/actions/rustup@master

      - name: Build Wheels
        uses: messense/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: auto
          args: --release --out dist --no-sdist -m python-bindings/Cargo.toml
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist

  macos:
    name: macos
    runs-on: macos-latest
    strategy:
      matrix:
        target: [x64]
        python-version: ['3.6', '3.7', '3.8', '3.9', '3.10']
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.target }}
      - uses: sfackler/actions/rustup@master
      # Compile the Python wheel
      - name: Build Wheels
        uses: messense/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: auto
          args: --release --out dist --no-sdist -m python-bindings/Cargo.toml
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist
          
  linux:
    name: linux
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
        python-path: ['cp36-cp36m', 'cp37-cp37m', 'cp38-cp38', 'cp39-cp39', 'cp310-cp310']
    #container: quay.io/pypa/manylinux2014_x86_64:latest
    container: quay.io/pypa/manylinux_2_24_x86_64:latest
    env:
      RUSTFLAGS: -C target-cpu=k8
      PYO3_CROSS_LIB_DIR: /opt/python/${{ matrix.python-path }}/lib
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      # Compile the Python wheel
      - run: apt update && apt install libffi-dev libssl-dev -y
      - run: /opt/python/${{ matrix.python-path }}/bin/python -m venv .venv
      - run: .venv/bin/pip install -U pip wheel
      - run: .venv/bin/pip install -U twine maturin
      - run: OPENSSL_STATIC=1 OPENSSL_LIB_DIR=/usr/lib/x86_64-linux-gnu/ OPENSSL_INCLUDE_DIR=/usr/include/openssl .venv/bin/maturin build --no-sdist --release --strip --out dist --manylinux 2_24 -i /opt/python/${{ matrix.python-path }}/bin/python --target ${{ matrix.target }} -m python-bindings/Cargo.toml
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist
      ## Upload error logs 
      - name: upload error logs
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: crash_dump
          path: /tmp/*.toml


  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [windows, macos, linux]
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: wheels
      - uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Publish to PyPi
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_ACC }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASS }}
        run: |
          pip install --upgrade twine
          twine upload --skip-existing *