name: PythonLinux

on:
  workflow_dispatch:

jobs:
  linux:
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - i686-unknown-linux-gnu
          - arm-unknown-linux-gnueabihf
        bindgen:
          - true
          - false
        library:
          - name: openssl
            version: vendored
          - name: openssl
            version: 3.0.1
            dl-path: /
          - name: openssl
            version: 1.1.1m
            dl-path: /
          - name: openssl
            version: 1.1.0l
            dl-path: /old/1.1.0
          - name: openssl
            version: 1.0.2u
            dl-path: /old/1.0.2
          - name: openssl
            version: 1.0.1u
            dl-path: /old/1.0.1
        include:
          - target: x86_64-unknown-linux-gnu
            bindgen: true
            library:
              name: libressl
              version: 2.5.5
          - target: x86_64-unknown-linux-gnu
            bindgen: true
            library:
              name: libressl
              version: 3.4.2
          - target: x86_64-unknown-linux-gnu
            bindgen: false
            library:
              name: libressl
              version: 2.5.5
          - target: x86_64-unknown-linux-gnu
            bindgen: false
            library:
              name: libressl
              version: 3.4.2
    name: ${{ matrix.target }}-${{ matrix.library.name }}-${{ matrix.library.version }}-${{ matrix.bindgen }}
    runs-on: ubuntu-latest
    env:
      OPENSSL_DIR: /opt/openssl
      PKG_CONFIG_PATH: /opt/openssl
      CARGO_TARGET_ARM_UNKNOWN_LINUX_GNUEABIHF_LINKER: arm-linux-gnueabihf-gcc
      CARGO_TARGET_ARM_UNKNOWN_LINUX_GNUEABIHF_AR: arm-linux-gnueabihf-ar
      CARGO_TARGET_ARM_UNKNOWN_LINUX_GNUEABIHF_RUNNER: qemu-arm -L /usr/arm-linux-gnueabihf
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: 3.x
        architecture: x64
    - uses: sfackler/actions/rustup@master
    - run: echo "::set-output name=version::$(rustc --version)"
      id: rust-version
    - run: rustup target add ${{ matrix.target }}
    - name: Install packages
      run: |
        case "${{ matrix.target }}" in
        "x86_64-unknown-linux-gnu")
          exit 0
          ;;
        "i686-unknown-linux-gnu")
          packages="gcc-multilib"
          ;;
        "arm-unknown-linux-gnueabihf")
          packages="gcc-arm-linux-gnueabihf qemu-user"
          ;;
        esac
        sudo apt-get update
        sudo apt-get install -y $packages
    - run: sudo apt-get remove -y libssl-dev
    - uses: actions/cache@v2
      with:
        path: /opt/openssl
        key: openssl-${{ matrix.target }}-${{ matrix.library.name }}-${{ matrix.library.version }}-2
      if: matrix.library.version != 'vendored'
      id: openssl-cache
    - name: Build OpenSSL
      run: |
        case "${{ matrix.library.name }}" in
        "openssl")
          url="https://openssl.org/source${{ matrix.library.dl-path }}/openssl-${{ matrix.library.version }}.tar.gz"
          ;;
        "libressl")
          url="https://ftp.openbsd.org/pub/OpenBSD/LibreSSL/libressl-${{ matrix.library.version }}.tar.gz"
          ;;
        esac
        case "${{ matrix.target}}" in
        "x86_64-unknown-linux-gnu")
          OS_COMPILER=linux-x86_64
          OS_FLAGS=""
          ;;
        "i686-unknown-linux-gnu")
          OS_COMPILER=linux-elf
          OS_FLAGS=-m32
          ;;
        "arm-unknown-linux-gnueabihf")
          OS_COMPILER=linux-armv4
          OS_FLAGS=""
          export AR=arm-linux-gnueabihf-ar
          export CC=arm-linux-gnueabihf-gcc
          ;;
        esac
        mkdir /tmp/build
        cd /tmp/build
        curl -L $url | tar --strip-components=1 -xzf -
        case "${{ matrix.library.name }}" in
        "openssl")
          ./Configure --prefix=$OPENSSL_DIR --libdir=lib $OS_COMPILER -fPIC -g $OS_FLAGS no-shared
          ;;
        "libressl")
          ./configure --prefix=$OPENSSL_DIR --disable-shared --with-pic
          ;;
        esac
        make
        make install_sw
      if: matrix.library.version != 'vendored' && !steps.openssl-cache.outputs.cache-hit
    - run: |
        echo "RUST_TEST_THREADS=1" >> $GITHUB_ENV
        echo BINDGEN_EXTRA_CLANG_ARGS="--sysroot /usr/arm-linux-gnueabihf" >> $GITHUB_ENV
      if: matrix.target == 'arm-unknown-linux-gnueabihf'
    - uses: actions/cache@v1
      with:
        path: ~/.cargo/registry/index
        key: index-${{ runner.os }}-${{ github.run_number }}
        restore-keys: |
          index-${{ runner.os }}-
    - run: cargo generate-lockfile
    - uses: actions/cache@v1
      with:
        path: ~/.cargo/registry/cache
        key: registry-${{ runner.os }}-${{ steps.rust-version.outputs.version }}-${{ hashFiles('Cargo.lock') }}
    - run: cargo fetch
    - uses: actions/cache@v1
      with:
        path: target
        key: target-${{ matrix.target }}-${{ matrix.bindgen }}-${{ matrix.library.name }}-${{ matrix.library.version }}-${{ steps.rust-version.outputs.version }}-${{ hashFiles('Cargo.lock') }}
    - name: Build Wheels
      uses: messense/maturin-action@v1
      with:
        target: ${{ matrix.target }}
        manylinux: auto
        args: --release --out dist --no-sdist -m Cargo.toml
    - name: Upload wheels
      uses: actions/upload-artifact@v2
      with:
        name: wheels
        path: dist



  release:
    name: Release
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/')"
    needs: [linux, ]
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: wheels
      - uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Publish to PyPi
        env:
          TWINE_USERNAME: ${{ secrets.ACC }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASS }}
        run: |
          pip install --upgrade twine
          twine upload --skip-existing *